<?php

/**
 * @file
 * Create an interface for the library helpdesk
 */

/**
 * Implements hook_menu();
 */
function bibdk_helpdesk_menu() {
  $items['helpdesk'] = array(
    'title' => 'Helpdesk',
    'description' => 'Library helpdesk form.',
    'page callback' => 'bibdk_helpdesk_page',
    'access arguments' => array('access content'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

function bibdk_helpdesk_page(){
  drupal_set_title(t("Helpdesk"));
  return drupal_get_form('bibdk_helpdesk_form');
}

/**
 * Implements hook_block_info().
 */
function bibdk_helpdesk_block_info() {
  $blocks['bibdk-helpdesk-teaser'] = array(
    'info' => t('Bibliotek.dk : Library helpdesk teaser'),
    'cache' => DRUPAL_NO_CACHE,
    'description' => 'Library helpdesk teaser form.',
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function bibdk_helpdesk_block_view($delta = '') {
  drupal_add_css(drupal_get_path('module', 'bibdk_helpdesk') . '/css/bibdk_helpdesk.css');

  $dir = drupal_get_path('module', 'bibdk_helpdesk') . '/images/normal';
  $images = file_scan_directory($dir, '/.*\.png$/', array('key' => 'name'));
  $image = array_rand($images);

  $block = array();
  switch ($delta) {
    case 'bibdk-helpdesk-teaser':
      $block['subject'] = t('Library Helpdesk');
      $block['content'] = theme('bibdk_helpdesk_block', array(
        'description' => t('You can contact a librarian, if you need a personalized service.'),
        'link' => l("Ask the helpdesk", "helpdesk", array('attributes' => array('class' => array('bibdk-popup-link'), "rel" => array('userhelp')))), 
        'image_css' => $image)
      );
      break;
  }
  return $block;
}

/**
 * Implements hook_theme().
 */
function bibdk_helpdesk_theme() {
  $path = drupal_get_path('module', 'bibdk_helpdesk') . '/theme';
  $theme_array = array(
    'helpdesk' =>  array(
      'path' => $path,
      'template' => 'page--helpdesk',
      'arguments' => array(
        'content' => NULL,
        'show_blocks' => FALSE,
        'show_messages' => TRUE,
      )
     ),
    'bibdk_helpdesk_block' => array(
      'render element' => 'elements',
      'path' => $path,
      'template' => 'bibdk-helpdesk-block',
      'variables' => array('image_css', 'form'),
    ),
    'theme_bibdk_helpdesk_form' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk-helpdesk-form',
    ),
    'theme_bibdk_helpdesk_result' => array(
      'render element' => 'form',
      'path' => $path,
      'template' => 'bibdk-helpdesk-result',
    ),
  );
  return $theme_array;
}


/**
 * Implements hook_form().
 */
function bibdk_helpdesk_form() {
  $form['bibdk_helpdesk'] = array(
    '#type' => 'fieldset',
    '#title' => t('Ask Library helpdesk'),
    '#description' => t('Library helpdesk.'),
    '#tree' => FALSE,
  );

  $form['bibdk_helpdesk']['Title'] = array(
    '#type' => 'hidden',
    '#value' => 'Nyt spørgsmål modtaget fra bibliotek.dk'
  );

  $form['bibdk_helpdesk']['ReceptionMethodId'] = array(
    '#type' => 'hidden',
    '#value' => '7'
  );

  $form['bibdk_helpdesk']['RedirectSuccess'] = array(
    '#type' => 'hidden',
    '#value' => 'http://biblioteksvagten.dk/kvittering.asp'
  );

  $form['bibdk_helpdesk']['TimeLimitId'] = array(
    '#type' => 'select',
    '#title' => t('Time limit'),
    '#options' => array(
      t('No time limit'),
      "2 " . t('Hours'),
      "4 " . t('Hours'),
      "24 " . t('Hours'),
      "1 " . t('Day'),
      "1 " . t('Week')
    ),
    '#default_value' => '',
  );
  $form['bibdk_helpdesk']['QuestionText'] = array(
    '#type' => 'textarea',
    '#title' => t('My question is'),
    '#default_value' => '',
    '#required' => TRUE
  );
  
  $form['bibdk_helpdesk']['PurposeId'] = array(
    "#type" => "fieldset",
    "#after_build" => array("_remove_validation"),
    
  );
  $form['bibdk_helpdesk']['PurposeId'][] = array(
    '#type' => 'radios',
    '#title' => t('The information will be used for'),
    '#options' => array(
      '1' => t('General interest / hobby'),
      '6' => t('Business'),
      
    ),
    '#parents' => array('PurposeId'),
    '#spawned' => TRUE,
  );

  
  $form['bibdk_helpdesk']['PurposeId'][] = array(
    '#type' => 'radios',
    '#title' => t('or in connection with assignment for'),
    '#options' => array(
      '3' => t('Primary school'),
      '2' => t('Gymnasium, EUC, VUC, SOSU or other short-cycle higher education'),
      '4' => t('Medium-cycle higher or higher education'),
      '5' => t('University education or research'),
    ),
    '#spawned' => TRUE,
    '#parents' => array('PurposeId'), 
  );
  $form['bibdk_helpdesk']['CustomerName'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#default_value' => '',
    '#required' => TRUE
  );

  $form['bibdk_helpdesk']['CustomerPostalCode'] = array(
    '#type' => 'textfield',
    '#title' => t('PostalCode'),
    '#default_value' => '',
    '#required' => TRUE
  );

  $form['bibdk_helpdesk']['CustomerEmail'] = array(
    '#type' => 'textfield',
    '#title' => t('Email'),
    '#default_value' => '',
    '#required' => TRUE
  );

  $form['bibdk_helpdesk']['CustomerPhone'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone'),
    '#default_value' => '',
    '#required' => TRUE
  );
  
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Send'),
  );

  $form['#theme'] = 'theme_bibdk_helpdesk_form';
  return $form;
}

/**
 * remove required validation from Purpose ID  
 */
function _remove_validation($element){
  _bibdk_helpdesk_disable_validation($element);
  return $element;
}

/*
 * Recursive function.
 * Removes required validation flag for specified form element and all its children.
 */
function _bibdk_helpdesk_disable_validation(&$element) {
  unset($element['#needs_validation']);
  foreach(element_children($element) as $key) {
    _bibdk_helpdesk_disable_validation($element[$key]);
  }
}

/**
 * Validate helpdesk form submission.
 */
function bibdk_helpdesk_form_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['CustomerEmail'])) {
    form_set_error("CustomerEmail", t("Email needs to be a valid email"));
  }
  if (!isset($form_state['values']['PurposeId'])) {
    form_set_error("PurposeId", t("Please state a purpose"));
  }
}

/**
 * Process helpdesk form submission.
 */
function bibdk_helpdesk_form_submit($form, &$form_state) {
  $curl = new microcurl();
  try {
    $curl->set_url("http://biblioteksvagten.dk/adm/QuestionFormHandler.axd");
    $curl->set_post($form_state['values']);
    $result = $curl->get();
  } catch (Exception $e) {
    drupal_set_message("An error happened : $e");
    return;
  }

  if ($curl->has_error()) {
    drupal_set_message("Sorry we could not submit your query, please try again later", "error");
    watchdog("submit", "ERROR: cannot submit to helpdesk", $curl->has_error(), WATCHDOG_ERROR);
    return;
  }

  $status = $curl->get_status();
  if ($status['http_code'] == 302){
    drupal_goto("http://biblioteksvagten.dk/kvittering.asp");
  }
  else {
    drupal_set_message("Sorry we could not submit your query, please try again later", "error");
    watchdog("submit", "ERROR: cannot submit to helpdesk", $status, WATCHDOG_ERROR);
  }
}


function my_module_theme_registry_alter(&$theme_registry) {
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'my_custom_theme', MY_MODULE_PATH);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);

  // A list of templates the module will provide templates for
  $hooks = array('page');
  foreach ($hooks as $h) {
    // Add the key 'theme paths' if it doesn't exist in this theme's registry
    if (!isset($theme_registry[$h]['theme paths'])) {
      $theme_registry[$h]['theme paths'] = array();
    }

    //Shift this module's directory to the top of the theme path list 
    if(is_array($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      if ($first_element) {
        array_unshift($theme_registry[$h]['theme paths'], $first_element, MY_MODULE_PATH);
      } else {
        array_unshift($theme_registry[$h]['theme paths'], MY_MODULE_PATH);
      }
    }
  }
}